<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int waterLvMin = 1;
const int waterLvMax = 3;


//elements are integers between 0 and 10, custom data type, used for stack
typedef int[0,1] id_e;
//we have three water levels, can be expanded if needed
typedef int[waterLvMin,waterLvMax] level;

id_e popped;

level waterLevelLeft;
level waterLevelLockChamber;
level waterLevelRight;


//info:
/*
//12 meter verschil max
//20 cm verschil minimum
//pompen gooien er alleen water bij

*/</declaration>
	<template>
		<name x="5" y="5">Main</name>
		<declaration>//------------------------------
// Variables
//------------------------------

//stack grootte
const int size = 2;

//stack pointer to current element
int[0,size] head=0;

//activate pump?
bool activatePump = false;
bool shouldWaterLevelBeRaised = false; //if true water will be lowered

//boat priority, used to determine which gate to open and what water level the pumps need to reach
bool isLeftGateFirst = false;

//------------------------------
// The boats stack
//------------------------------

//id_e boatsInQueue[size];//boatsInQueue[0] is left side, boatsInQueue[1] is right side

id_e boatsInQueueLeft = 0;
id_e boatsInQueueRight = 0;


//stack push
void push(id_e e)
{
    if(head==size){
        head=0;
    }

    if(e == 1){//prevent boats from leaving
        if(head==0){
            boatsInQueueLeft = e;
        } else if(head==1){
            boatsInQueueRight = e;
        }
    }

    head++;

    /*if(boatsInQueue[head]==0){
        boatsInQueue[head++]=e;
    }*/
}
//empty stack completely
void emptyStack()
{
    /*id_e temp[size];
    boatsInQueue = temp;*/
    head = 0;
    //remember 

    boatsInQueueLeft = 0;
    boatsInQueueRight = 0;
}
//stack pop
/*id_e pop()
{
    id_e temp=boatsInQueue[head-1];
    boatsInQueue[--head]=0;
    return (boatsInQueue[--head]);
}
//stack push
bool isFull()
{
    return(head==size);

}*/
//any boats at the sluice?
bool isEmpty()
{
    if (boatsInQueueLeft==0&amp;&amp;boatsInQueueRight==0){
        return true;
    }
    return false;

    /*if (boatsInQueue[0]==0&amp;&amp;boatsInQueue[1]==0){
        return true;
    }
    return false;*/
    //return (head==0);
}

/*end stack*/

//------------------------------
// Initialize
//------------------------------

void initialize(){
    waterLevelLeft = 3;
    waterLevelLockChamber = 2;
    waterLevelRight = 1;
}

/*end initialize*/

//------------------------------
// Lock Chamber
//------------------------------

//raise water level
void fillLockChamber(){ 
    if(waterLevelLockChamber != waterLvMax){  //just in case check to see if we don't go out of defined integer range
        waterLevelLockChamber = waterLevelLockChamber+1;
    }
}

//lower water level
void emptyLockChamber(){
    if(waterLevelLockChamber != waterLvMin){ //just in case check to see if we don't go out of defined integer range
        waterLevelLockChamber = waterLevelLockChamber-1;
    }
}

//check if water level higher/lower than LEFT side
bool waterLevelCheckLeftSame(){
    if(waterLevelLeft == waterLevelLockChamber){
        return false;//keep level
    } else if(waterLevelLeft &lt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = false;
    } else if(waterLevelLeft &gt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = true;
    }
    return true;
}

//check if water level higher/lower than RIGHT side
bool waterLevelCheckRightSame(){
    if(waterLevelRight == waterLevelLockChamber){
        return false;//keep level
    } else if(waterLevelRight &lt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = false;
    } else if(waterLevelRight &gt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = true;
    }
    return true;
}

//decides which que of boats is going trough the sluice first
void passRequestPriority(){ 
    activatePump = false;
    if(boatsInQueueLeft==1&amp;&amp;boatsInQueueRight==1){//Give priority to left
        activatePump = waterLevelCheckLeftSame();
        isLeftGateFirst = true;
    } else if(boatsInQueueLeft==1&amp;&amp;boatsInQueueRight==0){//Priority to left
        activatePump = waterLevelCheckLeftSame();
        isLeftGateFirst = true;
    } else if(boatsInQueueLeft==0&amp;&amp;boatsInQueueRight==1){//Priority to Right
        activatePump = waterLevelCheckRightSame();
        isLeftGateFirst = false;
    }
}

bool activateThePump(){
    return activatePump;
}

bool raiseWaterLv(){
    return shouldWaterLevelBeRaised;
}

/*end lock chamber*/


</declaration>
		<location id="id0" x="578" y="-238">
			<name x="484" y="-289">sensorSluiceOutgoingBoatClear</name>
		</location>
		<location id="id1" x="748" y="-238">
			<name x="654" y="-272">lightsInsideOutgoingRed</name>
		</location>
		<location id="id2" x="884" y="-238">
			<name x="807" y="-289">lightsInsideOutgoingGreen</name>
		</location>
		<location id="id3" x="1054" y="-238">
			<name x="986" y="-272">sluiceOutgoingOpen</name>
		</location>
		<location id="id4" x="1224" y="-238">
			<name x="1139" y="-272">sluiceOutgoingOpening</name>
		</location>
		<location id="id5" x="1394" y="-119">
			<name x="1326" y="-153">sluiceIncomingClosed</name>
		</location>
		<location id="id6" x="1394" y="0">
			<name x="1326" y="-42">sluiceIncomingClosing</name>
		</location>
		<location id="id7" x="1224" y="0">
			<name x="1096" y="-34">sensorSluiceIncomingBoatClear</name>
		</location>
		<location id="id8" x="748" y="0">
			<name x="688" y="17">sluiceIncomingOpen</name>
		</location>
		<location id="id9" x="374" y="-238">
			<name x="364" y="-272">sluiceOutgoingClosing</name>
		</location>
		<location id="id10" x="170" y="-238">
			<name x="93" y="-272">sluiceOutgoingClosed</name>
		</location>
		<location id="id11" x="340" y="-102">
			<name x="306" y="-136">pumpFill</name>
		</location>
		<location id="id12" x="340" y="102">
			<name x="297" y="119">pumpEmpty</name>
		</location>
		<location id="id13" x="340" y="0">
			<name x="280" y="-34">waterLevelCheck</name>
		</location>
		<location id="id14" x="1054" y="0">
			<name x="969" y="-51">lightsIncomingOutsideRed</name>
		</location>
		<location id="id15" x="0" y="170">
			<name x="-42" y="136">sluiceAllClosed</name>
		</location>
		<location id="id16" x="-136" y="170">
			<name x="-170" y="136">lightsAllRed</name>
		</location>
		<location id="id17" x="-272" y="170">
			<name x="-297" y="136">startUp</name>
		</location>
		<location id="id18" x="884" y="0">
			<name x="816" y="-34">lightsIncomingOutsideGreen</name>
		</location>
		<location id="id19" x="578" y="0">
			<name x="510" y="-25">sluiceIncomingOpening</name>
		</location>
		<location id="id20" x="170" y="0">
			<name x="93" y="-34">checkPassRequest</name>
		</location>
		<location id="id21" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id22" x="1394" y="-348">
			<name x="1360" y="-382">pumpFill2</name>
		</location>
		<location id="id23" x="1394" y="-238">
			<name x="1334" y="-272">waterLevelCheck2</name>
		</location>
		<location id="id24" x="1530" y="-238">
			<name x="1487" y="-221">pumpEmpty2</name>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="assignment" x="399" y="-102">passRequestPriority()</label>
			<nail x="476" y="-102"/>
			<nail x="476" y="-34"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="399" y="76">passRequestPriority()</label>
			<nail x="476" y="102"/>
			<nail x="476" y="34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id19"/>
			<label kind="guard" x="399" y="0">!activateThePump()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id21"/>
			<label kind="comments" x="8" y="-204">Go to idle 
when requests
are done</label>
			<nail x="0" y="-238"/>
			<nail x="0" y="-34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id20"/>
			<label kind="comments" x="178" y="-170">If requests 
are still open 
for current 
time frame</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="comments" x="212" y="-229">Return signal 
after it is closed</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id9"/>
			<label kind="comments" x="442" y="-229">Ater confirmed 
clear send signal
to close the 
outgoing door</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="comments" x="578" y="-221">After x amount of 
timeafter light turns 
redcheck if there is a 
boat between the 
sluicedoors. And 
return all clear</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="comments" x="756" y="-221">After X amount 
of time turn it 
back to red</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="comments" x="909" y="-229">Turn the lights
outgoing inside 
on green after 
the doors confirm
they are opened 
correctly</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="comments" x="1088" y="-238">Return signal 
after it is open</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id4"/>
			<label kind="comments" x="1241" y="-348">If outgoing
water level 
and lock chamber
is same proceed</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id23"/>
			<label kind="comments" x="1232" y="-195">Check current water
levels of outgoing
and lock chamber</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="comments" x="1402" y="-102">Return signal 
after it is closed</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="assignment" x="1266" y="0">emptyStack()</label>
			<label kind="comments" x="1275" y="34">Ater confirmed 
clear send signal
to close the 
incoming door</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="comments" x="1072" y="25">After x amount of time
after light turns red
check if there is a 
boat between the sluice
doors. And return all
clear</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id18"/>
			<label kind="comments" x="756" y="-144">Turn the lights
incoming outside 
on green after 
the doors confirm
they are opened 
correctly</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id14"/>
			<label kind="comments" x="892" y="25">After X amount of time
turn it back to red</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="297" y="34">!raiseWaterLv()</label>
			<label kind="assignment" x="272" y="51">emptyLockChamber()</label>
			<label kind="comments" x="340" y="153">Turn on pump to
empty x amount 
of distance</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="guard" x="297" y="-85">raiseWaterLv()</label>
			<label kind="assignment" x="297" y="-68">fillLockChamber()</label>
			<label kind="comments" x="289" y="-195">Turn on pump
to fill up x
amount of distance</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id13"/>
			<label kind="guard" x="204" y="0">!isEmpty()</label>
			<label kind="assignment" x="204" y="17">passRequestPriority()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id8"/>
			<label kind="comments" x="544" y="-51">Update state of sluice to open</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id21"/>
			<label kind="comments" x="-144" y="51">Fill in the sensor
values with the
start up values that
are measured.
Set priority to none</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="comments" x="-136" y="204">Close all doors
after checking if 
nothing is obstructing it</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="assignment" x="-238" y="153">initialize()</label>
			<label kind="comments" x="-297" y="195">Turn off all the 
lightsso no boats 
will mistake it for 
a working sluice
after starting up</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="comments" x="25" y="-119">Check every x 
amount of time 
if there is a 
request while 
not in use</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="51" y="8">e:id_e</label>
			<label kind="assignment" x="51" y="25">push(e)</label>
			<label kind="comments" x="17" y="76">No Request
go back to idle state</label>
			<nail x="136" y="68"/>
			<nail x="34" y="68"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="comments" x="1419" y="-340">Return updated value ones finished</label>
			<nail x="1428" y="-306"/>
			<nail x="1428" y="-272"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="comments" x="1411" y="-204">Ruturn updated value ones finished</label>
			<nail x="1496" y="-204"/>
			<nail x="1428" y="-204"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="comments" x="1462" y="-306">Turn on pump to
empty x amount 
of distance</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="comments" x="1334" y="-433">Turn on pump
to fill up x
amount of distance</label>
		</transition>
	</template>
	<template>
		<name>PumpEmpty</name>
		<location id="id25" x="0" y="0">
		</location>
		<init ref="id25"/>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Main;

    </system>
	<queries>
	</queries>
</nta>
