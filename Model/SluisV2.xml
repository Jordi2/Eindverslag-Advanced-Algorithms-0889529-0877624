<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int waterLvMin = 1;
const int waterLvMax = 3;

//elements are integers between 0 and 10, custom data type, used for stack
typedef int[0,1] id_e;
typedef int[0,3] gateState;//0, 1, 2, 3 = closed, opening..., open, closing...
//we have three water levels, can be expanded if needed
typedef int[waterLvMin,waterLvMax] level;

//waterlevels
level waterLevelLeft;
level waterLevelLockChamber;
level waterLevelRight;

//gates
gateState leftGateState = 0;  //closed
gateState rightGateState = 0; //closed
id_e gateObstruction = false;

//lights
id_e greenlightLeft = 0;
id_e redlightLeft = 1;
id_e greenlightRight = 0;
id_e redlightRight = 1;


//info:
/*
//12 meter verschil max
//20 cm verschil minimum
//pompen gooien er alleen water bij

*/

//broadcast chan druk;//broadcast may be useful as emergency button
chan druk;
chan arrival;</declaration>
	<template>
		<name x="5" y="5">Main</name>
		<declaration>//------------------------------
// Variables
//------------------------------

//stack grootte
const int size = 2;

//stack pointer to current element
int[0,size] head=0;

//activate pump?
bool activatePump = false;
bool shouldWaterLevelBeRaised = false; //if true water will be lowered

//boat priority, used to determine which gate to open and what water level the pumps need to reach
bool isLeftGateFirst = false;

//------------------------------
// The boats stack
//------------------------------

//id_e boatsInQueue[size];//boatsInQueue[0] is left side, boatsInQueue[1] is right side

id_e boatsInQueueLeft = 0;
id_e boatsInQueueRight = 0;
id_e boatsInQueueLockChamber = 0;


//stack push
void push(id_e e)
{
    if(head==size){
        head=0;
    }

    if(e == 1){//prevent boats from leaving
        if(head==0){
            boatsInQueueLeft = e;
        } else if(head==1){
            boatsInQueueRight = e;
        }
    }

    head++;
}

//empty stack completely
void emptyStack()
{
    head = 0;

    //boats in queue move to lockchamber
    if(isLeftGateFirst){
        boatsInQueueLeft = 0;
    } else {
        boatsInQueueRight = 0;
    }

    boatsInQueueLockChamber = 1;//moves boats to lockchamber
}

//boats leaving lockchamber
void emptyLockChamberQueue(){
    boatsInQueueLockChamber = 0;
}

//any boats at the sluice?
bool isEmpty()
{
    if (boatsInQueueLeft==0&amp;&amp;boatsInQueueRight==0){
        return true;
    }
    return false;
}

/*end stack*/

//------------------------------
// Initialize
//------------------------------

void initialize(){
    waterLevelLeft = 3;
    waterLevelLockChamber = 2;
    waterLevelRight = 1;
}

/*end initialize*/

//------------------------------
// Lock Chamber
//------------------------------

//raise water level
void fillLockChamber(){ 
    if(waterLevelLockChamber != waterLvMax){  //just in case check to see if we don't go out of defined integer range
        waterLevelLockChamber = waterLevelLockChamber+1;
    }
}

//lower water level
void emptyLockChamber(){
    if(waterLevelLockChamber != waterLvMin){ //just in case check to see if we don't go out of defined integer range
        waterLevelLockChamber = waterLevelLockChamber-1;
    }
}

//check if water level higher/lower than LEFT side
bool waterLevelCheckLeftSame(){
    if(waterLevelLeft == waterLevelLockChamber){
        return false;//keep level
    } else if(waterLevelLeft &lt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = false;
    } else if(waterLevelLeft &gt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = true;
    }
    return true;
}

//check if water level higher/lower than RIGHT side
bool waterLevelCheckRightSame(){
    if(waterLevelRight == waterLevelLockChamber){
        return false;//keep level
    } else if(waterLevelRight &lt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = false;
    } else if(waterLevelRight &gt; waterLevelLockChamber){
        shouldWaterLevelBeRaised = true;
    }
    return true;
}

//decides which que of boats is going trough the sluice first
void passRequestPriority(){ 
    activatePump = false;
    if(boatsInQueueLeft==1&amp;&amp;boatsInQueueRight==1){//Give priority to left
        activatePump = waterLevelCheckLeftSame();
        isLeftGateFirst = true;
    } else if(boatsInQueueLeft==1&amp;&amp;boatsInQueueRight==0){//Priority to left
        activatePump = waterLevelCheckLeftSame();
        isLeftGateFirst = true;
    } else if(boatsInQueueLeft==0&amp;&amp;boatsInQueueRight==1){//Priority to Right
        activatePump = waterLevelCheckRightSame();
        isLeftGateFirst = false;
    }
}

//inference for waterlevel
void passRequestPriorityLockChamber(){ 
    activatePump = false;
    if(isLeftGateFirst){
        activatePump = waterLevelCheckRightSame();
    } else {
        activatePump = waterLevelCheckLeftSame();
    }
}

bool activateThePump(){
    return activatePump;
}

bool raiseWaterLv(){
    return shouldWaterLevelBeRaised;
}

bool lockChamberOccupied(){
    return boatsInQueueLockChamber;
}

/*end lock chamber*/

//------------------------------
// Gates
//------------------------------

//gate states: 0-&gt;1-&gt;2-&gt;3 = closed-&gt;opening...-&gt;opened-&gt;closing...
void updateGateStatePrime(){
    //if priority is for the left gate open it, otherwise open right gate
    if(isLeftGateFirst){
        (leftGateState != 3) ? leftGateState++ : leftGateState = 0;
    } else {
        (rightGateState != 3) ? rightGateState++ : rightGateState = 0;
    }
}

void updateGateStateSec(){
    //if priority was for the left gate open it, otherwise open right gate
    if(!isLeftGateFirst){
        (leftGateState != 3) ? leftGateState++ : leftGateState = 0;
    } else {
        (rightGateState != 3) ? rightGateState++ : rightGateState = 0;
    }
}

//see if there are any obstruction in between the gate doors
void obstructionDetect(id_e e)
{
    gateObstruction = e;
}

int gateObstructed(){
    return gateObstruction;
}

/*end gates*/

//------------------------------
// Lights
//------------------------------

void updateLightsPrime(){
    //check to see from which side the boats want to enter, then turn on/off the light for that side
    if(isLeftGateFirst){
        if(redlightLeft){
            redlightLeft = 0;
            greenlightLeft = 1;
        } else{
            redlightLeft = 1;
            greenlightLeft = 0;
        }
    } else{
        if(redlightRight){
            redlightRight = 0;
            greenlightRight = 1;
        } else{
            redlightRight = 1;
            greenlightRight = 0;
        }
    }
}

void updateLightsSec(){
    //boats just left lockchamber see if any boats want to enter while the gates are still open
    if(boatsInQueueLeft || boatsInQueueRight == 1){
        if(!isLeftGateFirst){
            if(redlightLeft){
                redlightLeft = 0;
                greenlightLeft = 1;
            } else{
                redlightLeft = 1;
                greenlightLeft = 0;
            }
        } else{
            if(redlightRight){
                redlightRight = 0;
                greenlightRight = 1;
            } else{
                redlightRight = 1;
                greenlightRight = 0;
            }
        }

        //store from which side the boats came
        if(boatsInQueueLeft == 1){
            isLeftGateFirst = false;
        }
        if(boatsInQueueRight == 1){
            isLeftGateFirst = true;
        }

        boatsInQueueLeft = 0;
        boatsInQueueRight = 0;
        boatsInQueueLockChamber = 1;
    }
}

/*end lights*/</declaration>
		<location id="id0" x="578" y="-238">
			<name x="484" y="-289">sensorSluiceOutgoingBoatClear</name>
		</location>
		<location id="id1" x="748" y="-238">
			<name x="654" y="-272">lightsInsideOutgoingRed</name>
		</location>
		<location id="id2" x="901" y="-238">
			<name x="824" y="-289">lightsInsideOutgoingGreen</name>
		</location>
		<location id="id3" x="1054" y="-238">
			<name x="986" y="-272">sluiceOutgoingOpen</name>
		</location>
		<location id="id4" x="1224" y="-238">
			<name x="1139" y="-272">sluiceOutgoingOpening</name>
		</location>
		<location id="id5" x="1394" y="-119">
			<name x="1326" y="-153">sluiceIncomingClosed</name>
		</location>
		<location id="id6" x="1394" y="0">
			<name x="1326" y="-42">sluiceIncomingClosing</name>
		</location>
		<location id="id7" x="1224" y="0">
			<name x="1096" y="-34">sensorSluiceIncomingBoatClear</name>
		</location>
		<location id="id8" x="748" y="0">
			<name x="688" y="17">sluiceIncomingOpen</name>
		</location>
		<location id="id9" x="374" y="-238">
			<name x="364" y="-272">sluiceOutgoingClosing</name>
		</location>
		<location id="id10" x="170" y="-238">
			<name x="93" y="-272">sluiceOutgoingClosed</name>
		</location>
		<location id="id11" x="340" y="-144">
			<name x="306" y="-178">pumpFill</name>
		</location>
		<location id="id12" x="340" y="136">
			<name x="297" y="153">pumpEmpty</name>
		</location>
		<location id="id13" x="340" y="0">
			<name x="289" y="-34">waterLevelCheck</name>
		</location>
		<location id="id14" x="1054" y="0">
			<name x="969" y="-51">lightsIncomingOutsideRed</name>
		</location>
		<location id="id15" x="0" y="170">
			<name x="-42" y="136">sluiceAllClosed</name>
		</location>
		<location id="id16" x="-136" y="170">
			<name x="-170" y="136">lightsAllRed</name>
		</location>
		<location id="id17" x="-272" y="170">
			<name x="-297" y="136">startUp</name>
		</location>
		<location id="id18" x="901" y="0">
			<name x="833" y="-34">lightsIncomingOutsideGreen</name>
		</location>
		<location id="id19" x="578" y="0">
			<name x="510" y="-25">sluiceIncomingOpening</name>
		</location>
		<location id="id20" x="170" y="0">
			<name x="93" y="-34">checkPassRequest</name>
		</location>
		<location id="id21" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id22" x="1394" y="-374">
			<name x="1360" y="-408">pumpFill2</name>
		</location>
		<location id="id23" x="1394" y="-238">
			<name x="1334" y="-272">waterLevelCheck2</name>
		</location>
		<location id="id24" x="1598" y="-238">
			<name x="1606" y="-229">pumpEmpty2</name>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="612" y="-170">gateObstructed()</label>
			<nail x="612" y="-170"/>
			<nail x="714" y="-170"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id14"/>
			<label kind="guard" x="1088" y="68">gateObstructed()</label>
			<nail x="1190" y="68"/>
			<nail x="1088" y="68"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="178" y="-127">lockChamberOccupied()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="assignment" x="433" y="-102">passRequestPriority()</label>
			<nail x="476" y="-136"/>
			<nail x="476" y="-34"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="425" y="76">passRequestPriority()</label>
			<nail x="476" y="136"/>
			<nail x="476" y="34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id19"/>
			<label kind="guard" x="408" y="0">!activateThePump()</label>
			<label kind="assignment" x="408" y="17">updateGateStatePrime()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id20"/>
			<label kind="guard" x="93" y="-110">!lockChamberOccupied()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="195" y="-238">updateGateStateSec()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id9"/>
			<label kind="guard" x="399" y="-238">!gateObstructed()</label>
			<label kind="assignment" x="399" y="-221">updateGateStateSec()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="select" x="637" y="-238">e:id_e</label>
			<label kind="assignment" x="595" y="-221">obstructionDetect(e)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="765" y="-238">updateLightsSec()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="assignment" x="919" y="-238">updateLightsSec()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="assignment" x="1072" y="-238">updateGateStateSec(),
emptyLockChamberQueue()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id4"/>
			<label kind="guard" x="1249" y="-238">!activateThePump()</label>
			<label kind="assignment" x="1241" y="-221">updateGateStateSec()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id23"/>
			<label kind="assignment" x="1275" y="-187">passRequestPriorityLockChamber()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="assignment" x="1334" y="-76">updateGateStatePrime()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="1266" y="0">!gateObstructed()</label>
			<label kind="assignment" x="1266" y="17">emptyStack(),
updateGateStatePrime()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="select" x="1122" y="0">e:id_e</label>
			<label kind="assignment" x="1071" y="17">obstructionDetect(e)</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id18"/>
			<label kind="assignment" x="766" y="0">updateLightsPrime()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id14"/>
			<label kind="assignment" x="919" y="0">updateLightsPrime()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="280" y="42">!raiseWaterLv() &amp;&amp;
activateThePump()</label>
			<label kind="assignment" x="280" y="76">emptyLockChamber()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="guard" x="297" y="-102">raiseWaterLv() &amp;&amp;
activateThePump()</label>
			<label kind="assignment" x="297" y="-68">fillLockChamber()</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id13"/>
			<label kind="guard" x="204" y="0">!isEmpty()</label>
			<label kind="assignment" x="204" y="17">passRequestPriority()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id8"/>
			<label kind="assignment" x="595" y="0">updateGateStatePrime()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="assignment" x="-238" y="153">initialize()</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="51" y="0">arrival?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="51" y="17">e:id_e</label>
			<label kind="assignment" x="51" y="34">push(e)</label>
			<nail x="136" y="68"/>
			<nail x="34" y="68"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="assignment" x="1445" y="-374">passRequestPriorityLockChamber()</label>
			<nail x="1598" y="-374"/>
			<nail x="1598" y="-272"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="assignment" x="1496" y="-161">passRequestPriorityLockChamber()</label>
			<nail x="1598" y="-136"/>
			<nail x="1428" y="-136"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="1453" y="-255">!raiseWaterLv() &amp;&amp;
activateThePump()</label>
			<label kind="assignment" x="1428" y="-221">emptyLockChamber()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="1343" y="-340">raiseWaterLv() &amp;&amp;
activateThePump()</label>
			<label kind="assignment" x="1343" y="-306">fillLockChamber()</label>
		</transition>
	</template>
	<template>
		<name>boat</name>
		<declaration>clock x;</declaration>
		<location id="id25" x="0" y="0">
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="guard" x="76" y="-34">x&gt;=2</label>
			<label kind="synchronisation" x="76" y="0">arrival!</label>
			<label kind="assignment" x="76" y="-17">x:=0</label>
			<nail x="68" y="68"/>
			<nail x="68" y="-68"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Main, boat;

    </system>
	<queries>
	</queries>
</nta>
